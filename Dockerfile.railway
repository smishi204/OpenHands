# Railway Dockerfile for OpenHands with Docker-in-Docker support
ARG OPENHANDS_BUILD_VERSION=dev

# Frontend build stage
FROM node:21.7.2-bookworm-slim AS frontend-builder

WORKDIR /app

COPY ./frontend/package.json frontend/package-lock.json ./
RUN npm install -g npm@10.5.1
RUN npm ci

COPY ./frontend ./
RUN npm run build

# Backend build stage
FROM python:3.12.3-slim AS backend-builder

WORKDIR /app
ENV PYTHONPATH='/app'

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

RUN apt-get update -y \
    && apt-get install -y curl make git build-essential \
    && python3 -m pip install poetry==1.8.2 --break-system-packages

COPY ./pyproject.toml ./poetry.lock ./
RUN touch README.md
RUN export POETRY_CACHE_DIR && poetry install --no-root && rm -rf $POETRY_CACHE_DIR

# Main application stage with Docker-in-Docker
FROM python:3.12.3-slim AS openhands-railway

WORKDIR /app

ARG OPENHANDS_BUILD_VERSION
ENV OPENHANDS_BUILD_VERSION=$OPENHANDS_BUILD_VERSION

# Railway and OpenHands environment variables
ENV RUN_AS_OPENHANDS=true
ENV OPENHANDS_USER_ID=42420
ENV SANDBOX_LOCAL_RUNTIME_URL=http://localhost
ENV USE_HOST_NETWORK=false
ENV WORKSPACE_BASE=/opt/workspace_base
ENV SANDBOX_USER_ID=0
ENV FILE_STORE=local
ENV FILE_STORE_PATH=/.openhands-state
ENV DOCKER_HOST=unix:///var/run/docker.sock

# Railway specific environment
ENV PORT=3000
ENV HOST=0.0.0.0

# Create necessary directories
RUN mkdir -p $FILE_STORE_PATH $WORKSPACE_BASE

# Install system dependencies including Docker
RUN apt-get update -y && \
    apt-get install -y \
        curl \
        ssh \
        sudo \
        ca-certificates \
        gnupg \
        lsb-release \
        iptables \
        supervisor \
        procps \
        && rm -rf /var/lib/apt/lists/*

# Install Docker
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update -y && \
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin && \
    rm -rf /var/lib/apt/lists/*

# Configure user management
RUN sed -i 's/^UID_MIN.*/UID_MIN 499/' /etc/login.defs && \
    sed -i 's/^UID_MAX.*/UID_MAX 1000000/' /etc/login.defs

# Create application group and user
RUN groupadd app && \
    useradd -l -m -u $OPENHANDS_USER_ID -s /bin/bash openhands && \
    usermod -aG app openhands && \
    usermod -aG sudo openhands && \
    usermod -aG docker openhands && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set up permissions
RUN chown -R openhands:app /app && chmod -R 770 /app && \
    chown -R openhands:app $WORKSPACE_BASE && chmod -R 770 $WORKSPACE_BASE

# Copy Python virtual environment
ENV VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH='/app'

COPY --chown=openhands:app --chmod=770 --from=backend-builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# Copy application files
COPY --chown=openhands:app --chmod=770 ./microagents ./microagents
COPY --chown=openhands:app --chmod=770 ./openhands ./openhands
COPY --chown=openhands:app --chmod=777 ./openhands/runtime/plugins ./openhands/runtime/plugins
COPY --chown=openhands:app --chmod=770 ./openhands/agenthub ./openhands/agenthub
COPY --chown=openhands:app ./pyproject.toml ./pyproject.toml
COPY --chown=openhands:app ./poetry.lock ./poetry.lock
COPY --chown=openhands:app ./README.md ./README.md
COPY --chown=openhands:app ./MANIFEST.in ./MANIFEST.in
COPY --chown=openhands:app ./LICENSE ./LICENSE

# Copy frontend build
COPY --chown=openhands:app --chmod=770 --from=frontend-builder /app/build ./frontend/build

# Install the package to ensure all dependencies are properly linked
USER openhands
RUN cd /app && python -m pip install -e . --no-deps
# Test imports to catch any missing dependencies early
RUN python -c "import openhands.agenthub; print('OpenHands imports successful')"
USER root

# Fix group ownership
RUN find /app \! -group app -exec chgrp app {} +

# Create supervisor configuration for Docker daemon and OpenHands
RUN mkdir -p /etc/supervisor/conf.d
COPY --chown=root:root <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:dockerd]
command=/usr/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2376 --storage-driver=overlay2
stdout_logfile=/var/log/supervisor/dockerd.log
stderr_logfile=/var/log/supervisor/dockerd.log
autorestart=true
priority=100

[program:openhands]
command=/app/railway-entrypoint.sh
stdout_logfile=/var/log/supervisor/openhands.log
stderr_logfile=/var/log/supervisor/openhands.log
autorestart=true
priority=200
user=root
environment=PATH="/app/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",PYTHONPATH="/app"
EOF

# Create Railway-specific entrypoint script
COPY --chown=root:root <<'EOF' /app/railway-entrypoint.sh
#!/bin/bash
set -eo pipefail

echo "Starting OpenHands on Railway..."

# Wait for Docker daemon to be ready
echo "Waiting for Docker daemon..."
timeout=60
while ! docker info >/dev/null 2>&1; do
    if [ $timeout -le 0 ]; then
        echo "Docker daemon failed to start within 60 seconds"
        exit 1
    fi
    echo "Docker daemon not ready, waiting..."
    sleep 2
    timeout=$((timeout - 2))
done

echo "Docker daemon is ready!"

# Pull the runtime container image
echo "Pulling runtime container image..."
docker pull docker.all-hands.dev/all-hands-ai/runtime:0.41-nikolaik || echo "Failed to pull runtime image, continuing..."

# Set up enduser if needed
if [ "$SANDBOX_USER_ID" != "0" ] && [ -n "$SANDBOX_USER_ID" ]; then
    echo "Setting up enduser with id $SANDBOX_USER_ID"
    if ! id "enduser" &>/dev/null; then
        if ! useradd -l -m -u $SANDBOX_USER_ID -s /bin/bash enduser; then
            echo "Failed to create user enduser with id $SANDBOX_USER_ID. Moving openhands user."
            incremented_id=$(($SANDBOX_USER_ID + 1))
            usermod -u $incremented_id openhands
            if ! useradd -l -m -u $SANDBOX_USER_ID -s /bin/bash enduser; then
                echo "Failed to create user enduser with id $SANDBOX_USER_ID for a second time. Exiting."
                exit 1
            fi
        fi
    fi
    usermod -aG app enduser
    usermod -aG docker enduser
    mkdir -p /home/enduser/.cache/huggingface/hub/

    echo "Running OpenHands as enduser"
    exec su enduser -c "uvicorn openhands.server.listen:app --host 0.0.0.0 --port ${PORT:-3000}"
else
    echo "Running OpenHands as root"
    export RUN_AS_OPENHANDS=false
    exec uvicorn openhands.server.listen:app --host 0.0.0.0 --port ${PORT:-3000}
fi
EOF

RUN chmod +x /app/railway-entrypoint.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Start supervisor which manages both Docker daemon and OpenHands
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]